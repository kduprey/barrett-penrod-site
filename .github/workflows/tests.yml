name: Cypress Tests
env:
  VERCEL_ORG_ID: '${{ secrets.VERCEL_ORG_ID }}'
  VERCEL_PROJECT_ID: '${{ secrets.VERCEL_PROJECT_ID }}'
  GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

on: [pull_request]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  install:
    if:
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v2.5.2
        with:
          node-version: '18'
          cache: 'npm' # See here for monorepo caching https://github.com/actions/setup-node#caching-global-packages-data

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        id: cache-primes
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-v3-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-primes.outputs.cache-hit != 'true'
        run: npm ci

      # - name: Check for differences in files
      #   id: check-differences
      #   run: |
      #     if [ -d .next ]; then
      #       if git diff --quiet origin/main..HEAD -- src/pages src/components; then
      #         echo "No changes found in src/pages and src/components folders, skipping subsequent steps"
      #         echo "skip_build=true" >> $GITHUB_OUTPUT
      #       fi
      #     fi

      # - name: Install Vercel CLI
      #   run: npm install --global vercel@latest

      # - name: Pull Vercel Environment Information
      #   run: vercel env pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      # - name: Dotenv Mount
      #   uses: falti/dotenv-action@v1.0.4
      #   with:
      #     path: .env
      #     mask-variables: true
      #     export-variables: true
      #     keys-case: upper

  cypress-run-tests:
    runs-on: ubuntu-latest
    needs: install
    environment: preview
    env:
      CALENDLY_API_KEY: ${{ secrets.CALENDLY_API_KEY }}
      CALENDLY_WEBHOOK_SIGNING_KEY: ${{ secrets.CALENDLY_WEBHOOK_SIGNING_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      HYGRAPH_API_KEY: ${{ secrets.HYGRAPH_API_KEY }}
      NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
      SENDGRID_DEV_API_KEY: ${{ secrets.SENDGRID_DEV_API_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      STRIPE_TEST_SECRET_KEY: ${{ secrets.STRIPE_TEST_SECRET_KEY }}
      STRIPE_TEST_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      STRIPE_TEST_PUBLISHABLE_KEY: ${{ secrets.STRIPE_TEST_PUBLISHABLE_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm' # See here for monorepo caching https://github.com/actions/setup-node#caching-global-packages-data

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: E2E on Chrome
        uses: cypress-io/github-action@v5.7.2
        with:
          browser: chrome
          start: npm run start
          wait-on: 'http://localhost:3000'
        env:
          # pass GitHub token to detect new build vs re-run build
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Uploading Screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: 'cypress-screenshots'
          path: cypress/screenshots

      # Test run video was always captured, so this action uses "always()" condition
      - name: Uploading Videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos

  unit-tests:
    runs-on: ubuntu-latest
    needs: install
    environment: preview
    env:
      CALENDLY_API_KEY: ${{ secrets.CALENDLY_API_KEY }}
      CALENDLY_WEBHOOK_SIGNING_KEY: ${{ secrets.CALENDLY_WEBHOOK_SIGNING_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      HYGRAPH_API_KEY: ${{ secrets.HYGRAPH_API_KEY }}
      NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
      SENDGRID_DEV_API_KEY: ${{ secrets.SENDGRID_DEV_API_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      STRIPE_TEST_SECRET_KEY: ${{ secrets.STRIPE_TEST_SECRET_KEY }}
      STRIPE_TEST_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      STRIPE_TEST_PUBLISHABLE_KEY: ${{ secrets.STRIPE_TEST_PUBLISHABLE_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Start containers
        run: docker-compose -f "docker-compose.yml" up -d --build
        env:
          DOCKER_MONGO_USERNAME: ${{ secrets.DOCKER_MONGO_USERNAME }}
          DOCKER_MONGO_PWD: ${{ secrets.DOCKER_MONGO_PWD }}
          DOCKER_MONGO_DBNAME: test

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm' # See here for monorepo caching https://github.com/actions/setup-node#caching-global-packages-data

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Unit Tests
        run: npm run test:unit

      - name: Stop containers
        if: always()
        run: docker-compose -f "docker-compose.yml" down
