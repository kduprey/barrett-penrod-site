name: Unit & E2E Tests
env:
  VERCEL_ORG_ID: "${{ secrets.VERCEL_ORG_ID }}"
  VERCEL_PROJECT_ID: "${{ secrets.VERCEL_PROJECT_ID }}"
  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

on: [pull_request]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  install:
    name: Install & Cache
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm" # See here for monorepo caching https://github.com/actions/setup-node#caching-global-packages-data

      - name: Cache NPM dependencies and Prisma Client
        uses: actions/cache@v4
        id: cache-primes
        with:
          path: |
            apps/**/node_modules
            packages/**/node_modules
            node_modules
            packages/db/src/client
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-primes.outputs.cache-hit != 'true'
        run: npm i

  cypress-run-tests:
    name: Cypress Tests
    runs-on: ubuntu-latest
    needs: install
    environment: preview
    env:
      CALENDLY_API_KEY: ${{ secrets.CALENDLY_API_KEY }}
      CALENDLY_WEBHOOK_SIGNING_KEY: ${{ secrets.CALENDLY_WEBHOOK_SIGNING_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      HYGRAPH_API_KEY: ${{ secrets.HYGRAPH_API_KEY }}
      NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
      SENDGRID_DEV_API_KEY: ${{ secrets.SENDGRID_DEV_API_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      STRIPE_TEST_SECRET_KEY: ${{ secrets.STRIPE_TEST_SECRET_KEY }}
      STRIPE_TEST_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      STRIPE_TEST_PUBLISHABLE_KEY: ${{ secrets.STRIPE_TEST_PUBLISHABLE_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm" # See here for monorepo caching https://github.com/actions/setup-node#caching-global-packages-data

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: |
            apps/**/node_modules
            packages/**/node_modules
            node_modules
            packages/db/src/client
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

      - name: Generate Prisma Client
        run: npm run postinstall

      - name: Build NextJS
        run: npm run build:site

      - name: E2E on Chrome
        uses: cypress-io/github-action@v6.7.0
        with:
          config: "viewportWidth=1000,viewportHeight=660"
          browser: chrome
          project: ./apps/site
          start: npm run start:site
          command: npm run cy:site
          wait-on: "http://localhost:3000"
        env:
          # pass GitHub token to detect new build vs re-run build
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Uploading Screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: "cypress-screenshots"
          path: cypress/screenshots

      # Test run video was always captured, so this action uses "always()" condition
      - name: Uploading Videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: install
    environment: preview
    env:
      CALENDLY_API_KEY: ${{ secrets.CALENDLY_API_KEY }}
      CALENDLY_WEBHOOK_SIGNING_KEY: ${{ secrets.CALENDLY_WEBHOOK_SIGNING_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      HYGRAPH_API_KEY: ${{ secrets.HYGRAPH_API_KEY }}
      NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
      SENDGRID_DEV_API_KEY: ${{ secrets.SENDGRID_DEV_API_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      STRIPE_TEST_SECRET_KEY: ${{ secrets.STRIPE_TEST_SECRET_KEY }}
      STRIPE_TEST_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      STRIPE_TEST_PUBLISHABLE_KEY: ${{ secrets.STRIPE_TEST_PUBLISHABLE_KEY }}
      VALID_OLD_CLIENT_TYPE: ${{ secrets.VALID_OLD_CLIENT_TYPE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Start container
        run: docker-compose -f "docker-compose.yml" up -d --build mongodb_container
        env:
          DOCKER_MONGO_USERNAME: ${{ secrets.DOCKER_MONGO_USERNAME }}
          DOCKER_MONGO_PWD: ${{ secrets.DOCKER_MONGO_PWD }}
          DOCKER_MONGO_DBNAME: test

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm" # See here for monorepo caching https://github.com/actions/setup-node#caching-global-packages-data

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: |
            apps/**/node_modules
            packages/**/node_modules
            node_modules
            packages/db/src/client
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

      - name: Generate Prisma Client
        run: npm run postinstall

      - name: Unit Tests
        run: npm -w 'apps/site' run test:ci

      - name: Stop container
        if: always()
        run: docker-compose -f "docker-compose.yml" down
